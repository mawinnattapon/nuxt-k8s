apiVersion: apps/v1  # เวอร์ชันของ API ที่ใช้ (apps/v1 เป็นเวอร์ชันมาตรฐานสำหรับ Deployment)
kind: Deployment  # ประเภทของทรัพยากร Kubernetes (Deployment คือการกำหนดวิธีการ deploy แอป)
metadata:  # ข้อมูลเมตาดาต้าของ Deployment
  name: nuxt-app  # ชื่อของ Deployment ใช้อ้างอิงใน kubectl และ dashboard
  labels:  # ป้ายกำกับสำหรับการค้นหาและจัดกลุ่ม
    app: nuxt-app  # ป้ายกำกับ app ใช้เชื่อมโยงกับ Service ผ่าน selector
spec:  # รายละเอียดของ Deployment
  replicas: 2  # จำนวน Pod ที่ต้องการให้รันพร้อมกัน (2 = รัน 2 instance เพื่อ high availability)
  selector:  # ตัวเลือกที่ใช้ระบุว่า Pod ไหนอยู่ภายใต้ Deployment นี้
    matchLabels:  # จับคู่ Pod ที่มีป้ายกำกับตรงกับที่ระบุ
      app: nuxt-app  # ต้องตรงกับ labels ใน template.metadata.labels
  template:  # เทมเพลตสำหรับสร้าง Pod
    metadata:  # ข้อมูลเมตาดาต้าของ Pod
      labels:  # ป้ายกำกับของ Pod
        app: nuxt-app  # ป้ายกำกับนี้ต้องตรงกับ selector.matchLabels ข้างบน
    spec:  # รายละเอียดของ Pod
      containers:  # รายการของคอนเทนเนอร์ที่จะรันใน Pod
      - name: nuxt-app  # ชื่อของคอนเทนเนอร์
        image: nuxt-app:latest  # ใช้ local image สำหรับทดสอบบน Docker Desktop
        imagePullPolicy: IfNotPresent  # นโยบายการดึง image (IfNotPresent = ใช้ local ถ้ามี, ไม่ดึงใหม่)
        ports:  # พอร์ตที่เปิดให้ใช้งาน
        - containerPort: 3000  # พอร์ตที่แอปฟังอยู่ในคอนเทนเนอร์ (Nuxt รันบนพอร์ต 3000)
        resources:  # การจัดสรรทรัพยากร
          limits:  # ขีดจำกัดสูงสุดของทรัพยากรที่ใช้ได้
            cpu: "500m"  # 500 milli-cores = 0.5 CPU core
            memory: "512Mi"  # 512 MiB RAM
          requests:  # ทรัพยากรขั้นต่ำที่ต้องการ
            cpu: "200m"  # 200 milli-cores = 0.2 CPU core
            memory: "256Mi"  # 256 MiB RAM
        readinessProbe:  # การตรวจสอบว่า Pod พร้อมรับ traffic หรือยัง
          httpGet:  # ตรวจสอบโดยส่ง HTTP GET request
            path: /  # ไปที่ path / (หน้าหลัก)
            port: 3000  # บนพอร์ต 3000
          initialDelaySeconds: 10  # รอ 10 วินาทีหลังจากเริ่ม container ก่อนเริ่มตรวจสอบ
          periodSeconds: 5  # ตรวจสอบทุก 5 วินาที
        livenessProbe:  # การตรวจสอบว่า Pod ยังทำงานอยู่หรือไม่
          httpGet:  # ตรวจสอบโดยส่ง HTTP GET request
            path: /  # ไปที่ path / (หน้าหลัก)
            port: 3000  # บนพอร์ต 3000
          initialDelaySeconds: 15  # รอ 15 วินาทีหลังจากเริ่ม container ก่อนเริ่มตรวจสอบ
          periodSeconds: 10  # ตรวจสอบทุก 10 วินาที
